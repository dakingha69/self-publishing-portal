import {Session} from 'meteor/session';

import * as ContractCollectionHelper from '/client/lib/helpers/contractCollectionHelper';
import {pendingTransaction} from '/client/lib/helpers/ethereumHelper';
import {
    insertPendingTransaction,
    removePendingTransaction,
    failedTransaction
} from '/client/lib/helpers/transactionCollectionHelper';

const abiArray = [{
    "constant": false,
    "inputs": [],
    "name": "fullfillContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "creator",
    "outputs": [{"name": "", "type": "address"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "valueType",
    "outputs": [{"name": "", "type": "uint8"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "varReward",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "isAccepted",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [{"name": "_name", "type": "string"}, {"name": "_description", "type": "string"}, {
        "name": "_fixReward",
        "type": "uint256"
    }, {"name": "_varReward", "type": "uint256"}, {
        "name": "valueTypeId",
        "type": "uint256"
    }, {"name": "contractTypeIds", "type": "uint256[]"}],
    "name": "changeContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [],
    "name": "acceptContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "description",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "revision",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "contractPartner",
    "outputs": [{"name": "", "type": "address"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "fixReward",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "isFullfilled",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [{"name": "", "type": "uint256"}],
    "name": "contractTypes",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [],
    "name": "declineContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "inputs": [{"name": "_name", "type": "string"}, {
        "name": "_description",
        "type": "string"
    }, {"name": "_contractPartner", "type": "address"}, {"name": "_fixReward", "type": "uint256"}, {
        "name": "_varReward",
        "type": "uint256"
    }, {"name": "valueTypeId", "type": "uint256"}, {"name": "contractTypeIds", "type": "uint256[]"}],
    "payable": false,
    "type": "constructor"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "contractAddress", "type": "address"}, {
        "indexed": false,
        "name": "name",
        "type": "string"
    }, {"indexed": false, "name": "description", "type": "string"}, {
        "indexed": false,
        "name": "fixReward",
        "type": "uint256"
    }, {"indexed": false, "name": "varReward", "type": "uint256"}, {
        "indexed": false,
        "name": "valueTypeId",
        "type": "uint256"
    }, {"indexed": false, "name": "contractTypes", "type": "bool[4]"}],
    "name": "ContractChanged",
    "type": "event"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "creator", "type": "address"}, {
        "indexed": false,
        "name": "partner",
        "type": "address"
    }, {"indexed": false, "name": "contractAddress", "type": "address"}],
    "name": "ContractAccepted",
    "type": "event"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "creator", "type": "address"}, {
        "indexed": false,
        "name": "partner",
        "type": "address"
    }, {"indexed": false, "name": "contractAddress", "type": "address"}],
    "name": "ContractDeclined",
    "type": "event"
}];

IndividualContractsSubscribedTo = [];

IndividualContractContract = web3.eth.contract(abiArray);

export function createIndividualContract(name, description, contractPartner, fixReward, varReward, valueTypeId, contractTypeIds, cb) {
    Session.set('waitingForConfirmation', true);
    IndividualContractContract.new(name, description, contractPartner, fixReward, varReward, valueTypeId, contractTypeIds,
        {
            from: web3.eth.accounts[0],
            data: '0x6060604052734ec2569729fadbd73709d840bdbbb3ff667627ca600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090810204021790555034620000005760405162001a9138038062001a91833981016040528080518201919060200180518201919060200180519060200190919080519060200190919080519060200190919080519060200190919080518201919060200150505b6000600a819055508660019080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010957805160ff19168380011785556200013a565b828001600101855582156200013a579182015b82811115620001395782518255916020019190600101906200011c565b5b5090506200016291905b808211156200015e57600081600090555060010162000144565b5090565b50508560029080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b257805160ff1916838001178555620001e3565b82800160010185558215620001e3579182015b82811115620001e2578251825591602001919060010190620001c5565b5b5090506200020b91905b8082111562000207576000816000905550600101620001ed565b5090565b505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090810204021790555084600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090810204021790555083600581905550826006819055506000600960006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055506000600960016101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055506200033082620006406401000000000262000ed1176401000000009004565b6200034f81620007fa6401000000000262001085176401000000009004565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fa63ad3060016002600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005546006548a6008600960009054906101000a900460ff16600960019054906101000a900460ff166040518c7c0100000000000000000000000000000000000000000000000000000000028152600401808c73ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018781526020018660048015620004e1576020028201916000905b82829054906101000a900460ff1681526020019060010190602082600001049283019260010382029150808411620004ac5790505b50508515158152602001841515815260200183810383528d818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620005785780601f106200054c5761010080835404028352916020019162000578565b820191906000526020600020905b8154815290600101906020018083116200055a57829003601f168201915b505083810382528c818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620005ff5780601f10620005d357610100808354040283529160200191620005ff565b820191906000526020600020905b815481529060010190602001808311620005e157829003601f168201915b50509d5050505050505050505050505050600060405180830381600087803b15620000005760325a03f11562000000575050505b50505050505050620008ff565b600081141562000689576000600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6001811415620006d2576001600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b60028114156200071b576002600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b600381141562000764576003600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6004811415620007ad576004600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6005811415620007f6576005600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b5b50565b600060006000600092505b60048310156200087057600060088460048110156200000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b828060010193505062000805565b600091505b8351821015620008f857838281518110156200000057906020019060200201519050600160088260048110156200000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b818060010192505062000875565b5b50505050565b611183806200090e6000396000f3606060405236156100d3576000357c01000000000000000000000000000000000000000000000000000000009004806301ce5e93146100d857806302d05d3f146100e757806305bbbea31461012057806306fdde031461014b5780633fe0b523146101c65780635051a5ec146101e95780635684935b1461020e578063619d2671146103035780637284e416146103125780637cc963801461038d578063800fa5ff146103b0578063885ef0ba146103e95780639db9109e1461040c578063e99548a514610431578063ef23b81314610464575b610000565b34610000576100e5610473565b005b34610000576100f46105db565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b346100005761012d610601565b60405180826005811161000057815260200191505060405180910390f35b3461000057610158610614565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101d36106b2565b6040518082815260200191505060405180910390f35b34610000576101f66106b8565b60405180821515815260200191505060405180910390f35b3461000057610301600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091908035906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506106cb565b005b3461000057610310610af7565b005b346100005761031f610c5f565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561037f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761039a610cfd565b6040518082815260200191505060405180910390f35b34610000576103bd610d03565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34610000576103f6610d29565b6040518082815260200191505060405180910390f35b3461000057610419610d2f565b60405180821515815260200191505060405180910390f35b346100005761044c6004808035906020019091905050610d42565b60405180821515815260200191505060405180910390f35b3461000057610471610d69565b005b6001600960016101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000908102040217905550600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397564acc30600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051847c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b156100005760325a03f115610000575050505b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106aa5780601f1061067f576101008083540402835291602001916106aa565b820191906000526020600020905b81548152906001019060200180831161068d57829003601f168201915b505050505081565b60065481565b600960009054906101000a900460ff1681565b600a600081548092919060010191905055508560019080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061072957805160ff1916838001178555610757565b82800160010185558215610757579182015b8281111561075657825182559160200191906001019061073b565b5b50905061077c91905b80821115610778576000816000905550600101610760565b5090565b50508460029080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106107ca57805160ff19168380011785556107f8565b828001600101855582156107f8579182015b828111156107f75782518255916020019190600101906107dc565b5b50905061081d91905b80821115610819576000816000905550600101610801565b5090565b5050836005819055508260068190555061083682610ed1565b61083f81611085565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3d1a8e93060016002600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005546006548a6008600a546040518b7c0100000000000000000000000000000000000000000000000000000000028152600401808b73ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200185600480156109b2576020028201916000905b82829054906101000a900460ff168152602001906001019060208260000104928301926001038202915080841161097e5790505b505084815260200183810383528c818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b505083810382528b818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610abe5780601f10610a9357610100808354040283529160200191610abe565b820191906000526020600020905b815481529060010190602001808311610aa157829003601f168201915b50509c50505050505050505050505050600060405180830381600087803b156100005760325a03f115610000575050505b505050505050565b6001600960006101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000908102040217905550600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631edd9ce530600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051847c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b156100005760325a03f115610000575050505b565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cf55780601f10610cca57610100808354040283529160200191610cf5565b820191906000526020600020905b815481529060010190602001808311610cd857829003601f168201915b505050505081565b600a5481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600960019054906101000a900460ff1681565b600881600481101561000057602091828204019190065b915054906101000a900460ff1681565b6000600960006101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000908102040217905550600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9051ca830600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051847c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b156100005760325a03f115610000575050505b565b6000811415610f19576000600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6001811415610f61576001600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6002811415610fa9576002600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6003811415610ff1576003600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6004811415611039576004600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6005811415611081576005600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b5b50565b600060006000600092505b60048310156110f8576000600884600481101561000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b8280600101935050611090565b600091505b835182101561117c5783828151811015610000579060200190602002015190506001600882600481101561000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b81806001019250506110fd565b5b5050505056',
            gas: '4700000'
        }, (error, contract) => {
            Session.set('waitingForConfirmation', false);
            if (error) {
                console.error(error);
                Materialize.toast('You have to accept the transaction', 3000);
            }
            else {
                const createIndividualContractTx = {
                    type: 'Contract',
                    title: 'New contract created',
                    description: 'You created a new contract'
                };
                insertPendingTransaction(contract.transactionHash, createIndividualContractTx);
                if (cb) cb();
                if (typeof contract.address !== 'undefined') {
                    console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
                    removePendingTransaction(contract.transactionHash);
                    console.log(contract);
                }
            }
        }
    );
}

export function changeContract(contractAddress, name, description, fixReward, varReward, valueType, contractTypes, cb) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].changeContract(name, description, fixReward, varReward, valueType, contractTypes, {gas: 300000}, (error, result) => {
        Session.set('waitingForConfirmation', false);
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction', 3000);
        } else {
            const changeContractTx = {
                type: 'Contract',
                title: 'Contract changed',
                description: 'You changed contract parameters'
            };
            pendingTransaction(result, changeContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function acceptContract(contractAddress) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].acceptContract((error, result) => {
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction!', 3000);
        } else {
            const acceptContractTx = {
                type: 'Contract',
                title: 'Contract accepted',
                description: 'You accepted a contract'
            };
            pendingTransaction(result, acceptContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function declineContract(contractAddress) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].declineContract((error, result) => {
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction!', 3000);
        } else {
            const declineContractTx = {
                type: 'Contract',
                title: 'Contract declined',
                description: 'You declined a contract'
            };
            pendingTransaction(result, declineContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function fullfillContract(contractAddress) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].fullfillContract((error, result) => {
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction!', 3000);
        } else {
            const fullfillContractTx = {
                type: 'Contract',
                title: 'Contract fullfilled',
                description: 'You fullfilled contract conditions'
            };
            pendingTransaction(result, fullfillContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function subscribeToContract(contractAddress) {
    console.log('Subscribed to contract: ' + contractAddress);
    IndividualContractsSubscribedTo[contractAddress] = web3.eth.contract(abiArray).at(contractAddress);
}

export function initializeActiveContracts() {
    const activeContracts = Contracts.find({isActive: true}).fetch();
    for (let i = 0; i < activeContracts.length; i++) {
        subscribeToContract(activeContracts[i].contractAddress);
    }
}