import {Session} from 'meteor/session';

import * as ContractCollectionHelper from '/client/lib/helpers/contractCollectionHelper';
import {pendingTransaction} from '/client/lib/helpers/ethereumHelper';
import {
    insertPendingTransaction,
    removePendingTransaction,
    failedTransaction
} from '/client/lib/helpers/transactionCollectionHelper';

const abiArray = [{
    "constant": false,
    "inputs": [],
    "name": "fullfillContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "creator",
    "outputs": [{"name": "", "type": "address"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "valueType",
    "outputs": [{"name": "", "type": "uint8"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "varReward",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "isAccepted",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [{"name": "_name", "type": "string"}, {"name": "_description", "type": "string"}, {
        "name": "_fixReward",
        "type": "uint256"
    }, {"name": "_varReward", "type": "uint256"}, {
        "name": "valueTypeId",
        "type": "uint256"
    }, {"name": "contractTypeIds", "type": "uint256[]"}],
    "name": "changeContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [],
    "name": "acceptContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "description",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "contractPartner",
    "outputs": [{"name": "", "type": "address"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "fixReward",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "isFullfilled",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [{"name": "", "type": "uint256"}],
    "name": "contractTypes",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [],
    "name": "declineContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "inputs": [{"name": "_name", "type": "string"}, {
        "name": "_description",
        "type": "string"
    }, {"name": "_contractPartner", "type": "address"}, {"name": "_fixReward", "type": "uint256"}, {
        "name": "_varReward",
        "type": "uint256"
    }, {"name": "valueTypeId", "type": "uint256"}, {"name": "contractTypeIds", "type": "uint256[]"}],
    "payable": false,
    "type": "constructor"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "contractAddress", "type": "address"}, {
        "indexed": false,
        "name": "name",
        "type": "string"
    }, {"indexed": false, "name": "description", "type": "string"}, {
        "indexed": false,
        "name": "fixReward",
        "type": "uint256"
    }, {"indexed": false, "name": "varReward", "type": "uint256"}, {
        "indexed": false,
        "name": "valueTypeId",
        "type": "uint256"
    }, {"indexed": false, "name": "contractTypes", "type": "bool[4]"}],
    "name": "ContractChanged",
    "type": "event"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "creator", "type": "address"}, {
        "indexed": false,
        "name": "partner",
        "type": "address"
    }, {"indexed": false, "name": "contractAddress", "type": "address"}],
    "name": "ContractAccepted",
    "type": "event"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "creator", "type": "address"}, {
        "indexed": false,
        "name": "partner",
        "type": "address"
    }, {"indexed": false, "name": "contractAddress", "type": "address"}],
    "name": "ContractDeclined",
    "type": "event"
}];

IndividualContractsSubscribedTo = [];

IndividualContractContract = web3.eth.contract(abiArray);

export function createIndividualContract(name, description, contractPartner, fixReward, varReward, valueTypeId, contractTypeIds, cb) {
    Session.set('waitingForConfirmation', true);
    IndividualContractContract.new(name, description, contractPartner, fixReward, varReward, valueTypeId, contractTypeIds,
        {
            from: web3.eth.accounts[0],
            data: '0x60606040527368a49c40038e5c8dc5ac30c51a8f5d4e42b466ae600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090810204021790555034620000005760405162001a6b38038062001a6b833981016040528080518201919060200180518201919060200180519060200190919080519060200190919080519060200190919080519060200190919080518201919060200150505b8660019080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010157805160ff191683800117855562000132565b8280016001018555821562000132579182015b828111156200013157825182559160200191906001019062000114565b5b5090506200015a91905b80821115620001565760008160009055506001016200013c565b5090565b50508560029080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001aa57805160ff1916838001178555620001db565b82800160010185558215620001db579182015b82811115620001da578251825591602001919060010190620001bd565b5b5090506200020391905b80821115620001ff576000816000905550600101620001e5565b5090565b505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090810204021790555084600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c0100000000000000000000000090810204021790555083600581905550826006819055506000600960006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055506000600960016101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055506200032882620006386401000000000262000eb3176401000000009004565b6200034781620007f26401000000000262001067176401000000009004565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fa63ad3060016002600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005546006548a6008600960009054906101000a900460ff16600960019054906101000a900460ff166040518c7c0100000000000000000000000000000000000000000000000000000000028152600401808c73ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018781526020018660048015620004d9576020028201916000905b82829054906101000a900460ff1681526020019060010190602082600001049283019260010382029150808411620004a45790505b50508515158152602001841515815260200183810383528d818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620005705780601f10620005445761010080835404028352916020019162000570565b820191906000526020600020905b8154815290600101906020018083116200055257829003601f168201915b505083810382528c818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620005f75780601f10620005cb57610100808354040283529160200191620005f7565b820191906000526020600020905b815481529060010190602001808311620005d957829003601f168201915b50509d5050505050505050505050505050600060405180830381600087803b15620000005760325a03f11562000000575050505b50505050505050620008f7565b600081141562000681576000600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6001811415620006ca576001600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b600281141562000713576002600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b60038114156200075c576003600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6004811415620007a5576004600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6005811415620007ee576005600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b5b50565b600060006000600092505b60048310156200086857600060088460048110156200000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b8280600101935050620007fd565b600091505b8351821015620008f057838281518110156200000057906020019060200201519050600160088260048110156200000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b81806001019250506200086d565b5b50505050565b61116580620009066000396000f3606060405236156100c8576000357c01000000000000000000000000000000000000000000000000000000009004806301ce5e93146100cd57806302d05d3f146100dc57806305bbbea31461011557806306fdde03146101405780633fe0b523146101bb5780635051a5ec146101de5780635684935b14610203578063619d2671146102f85780637284e41614610307578063800fa5ff14610382578063885ef0ba146103bb5780639db9109e146103de578063e99548a514610403578063ef23b81314610436575b610000565b34610000576100da610445565b005b34610000576100e96105ad565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34610000576101226105d3565b60405180826005811161000057815260200191505060405180910390f35b346100005761014d6105e6565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101c8610684565b6040518082815260200191505060405180910390f35b34610000576101eb61068a565b60405180821515815260200191505060405180910390f35b34610000576102f6600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061069d565b005b3461000057610305610adf565b005b3461000057610314610c47565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156103745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761038f610ce5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34610000576103c8610d0b565b6040518082815260200191505060405180910390f35b34610000576103eb610d11565b60405180821515815260200191505060405180910390f35b346100005761041e6004808035906020019091905050610d24565b60405180821515815260200191505060405180910390f35b3461000057610443610d4b565b005b6001600960016101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000908102040217905550600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397564acc30600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051847c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b156100005760325a03f115610000575050505b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900460ff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b505050505081565b60065481565b600960009054906101000a900460ff1681565b8560019080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106e957805160ff1916838001178555610717565b82800160010185558215610717579182015b828111156107165782518255916020019190600101906106fb565b5b50905061073c91905b80821115610738576000816000905550600101610720565b5090565b50508460029080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061078a57805160ff19168380011785556107b8565b828001600101855582156107b8579182015b828111156107b757825182559160200191906001019061079c565b5b5090506107dd91905b808211156107d95760008160009055506001016107c1565b5090565b505083600581905550826006819055506107f682610eb3565b6107ff81611067565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166313cb861a3060016002600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005546006548a6008600960009054906101000a900460ff16600960019054906101000a900460ff166040518c7c0100000000000000000000000000000000000000000000000000000000028152600401808c73ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152602001878152602001866004801561098f576020028201916000905b82829054906101000a900460ff168152602001906001019060208260000104928301926001038202915080841161095b5790505b50508515158152602001841515815260200183810383528d818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610a225780601f106109f757610100808354040283529160200191610a22565b820191906000526020600020905b815481529060010190602001808311610a0557829003601f168201915b505083810382528c818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610aa55780601f10610a7a57610100808354040283529160200191610aa5565b820191906000526020600020905b815481529060010190602001808311610a8857829003601f168201915b50509d5050505050505050505050505050600060405180830381600087803b156100005760325a03f115610000575050505b505050505050565b6001600960006101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000908102040217905550600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631edd9ce530600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051847c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b156100005760325a03f115610000575050505b565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cdd5780601f10610cb257610100808354040283529160200191610cdd565b820191906000526020600020905b815481529060010190602001808311610cc057829003601f168201915b505050505081565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600960019054906101000a900460ff1681565b600881600481101561000057602091828204019190065b915054906101000a900460ff1681565b6000600960006101000a81548160ff02191690837f0100000000000000000000000000000000000000000000000000000000000000908102040217905550600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9051ca830600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051847c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b156100005760325a03f115610000575050505b565b6000811415610efb576000600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6001811415610f43576001600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6002811415610f8b576002600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6003811415610fd3576003600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b600481141561101b576004600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b6005811415611063576005600760006101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b5b50565b600060006000600092505b60048310156110da576000600884600481101561000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b8280600101935050611072565b600091505b835182101561115e5783828151811015610000579060200190602002015190506001600882600481101561000057602091828204019190065b6101000a81548160ff02191690837f01000000000000000000000000000000000000000000000000000000000000009081020402179055505b81806001019250506110df565b5b5050505056',
            gas: '4700000'
        }, (error, contract) => {
            Session.set('waitingForConfirmation', false);
            if (error) {
                console.error(error);
                Materialize.toast('You have to accept the transaction', 3000);
            }
            else {
                const createIndividualContractTx = {
                    type: 'Contract',
                    title: 'New contract created',
                    description: 'You created a new contract'
                };
                insertPendingTransaction(contract.transactionHash, createIndividualContractTx);
                if (cb) cb();
                if (typeof contract.address !== 'undefined') {
                    console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
                    removePendingTransaction(contract.transactionHash);
                    console.log(contract);
                }
            }
        }
    );
}

export function changeContract(contractAddress, name, description, fixReward, varReward, valueType, contractTypes, cb) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].changeContract(name, description, fixReward, varReward, valueType, contractTypes, {gas: 300000}, (error, result) => {
        Session.set('waitingForConfirmation', false);
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction', 3000);
        } else {
            const changeContractTx = {
                type: 'Contract',
                title: 'Contract changed',
                description: 'You changed contract parameters'
            };
            pendingTransaction(result, changeContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function acceptContract(contractAddress) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].acceptContract((error, result) => {
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction!', 3000);
        } else {
            const acceptContractTx = {
                type: 'Contract',
                title: 'Contract accepted',
                description: 'You accepted a contract'
            };
            pendingTransaction(result, acceptContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function declineContract(contractAddress) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].declineContract((error, result) => {
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction!', 3000);
        } else {
            const declineContractTx = {
                type: 'Contract',
                title: 'Contract declined',
                description: 'You declined a contract'
            };
            pendingTransaction(result, declineContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function fullfillContract(contractAddress) {
    Session.set('waitingForConfirmation', true);
    IndividualContractsSubscribedTo[contractAddress].fullfillContract((error, result) => {
        if (error) {
            console.error(error);
            Materialize.toast('You have to accept the transaction!', 3000);
        } else {
            const fullfillContractTx = {
                type: 'Contract',
                title: 'Contract fullfilled',
                description: 'You fullfilled contract conditions'
            };
            pendingTransaction(result, fullfillContractTx, () => {
                if (cb) cb();
            });
        }
    });
}

export function subscribeToContract(contractAddress) {
    console.log('Subscribed to contract: ' + contractAddress);
    IndividualContractsSubscribedTo[contractAddress] = web3.eth.contract(abiArray).at(contractAddress);
}

export function initializeActiveContracts() {
    const activeContracts = Contracts.find({isActive: true}).fetch();
    for (let i = 0; i < activeContracts.length; i++) {
        subscribeToContract(activeContracts[i].contractAddress);
    }
}