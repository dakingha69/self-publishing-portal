import {Session} from 'meteor/session';

import * as ContractCollectionHelper from '/client/lib/helpers/contractCollectionHelper';
import {pendingTransaction} from '/client/lib/helpers/ethereumHelper';
import {
    insertPendingTransaction,
    removePendingTransaction,
    failedTransaction
} from '/client/lib/helpers/transactionCollectionHelper';

const abiArray = [{
    "constant": true,
    "inputs": [],
    "name": "creator",
    "outputs": [{"name": "", "type": "address"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "valueType",
    "outputs": [{"name": "", "type": "uint8"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "varReward",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "isAccepted",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [],
    "name": "acceptContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "description",
    "outputs": [{"name": "", "type": "string"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "contractPartner",
    "outputs": [{"name": "", "type": "address"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "fixReward",
    "outputs": [{"name": "", "type": "uint256"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [],
    "name": "isFullfilled",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": true,
    "inputs": [{"name": "", "type": "uint256"}],
    "name": "contractTypes",
    "outputs": [{"name": "", "type": "bool"}],
    "payable": false,
    "type": "function"
}, {
    "constant": false,
    "inputs": [],
    "name": "declineContract",
    "outputs": [],
    "payable": false,
    "type": "function"
}, {
    "inputs": [{"name": "_name", "type": "string"}, {
        "name": "_description",
        "type": "string"
    }, {"name": "_contractPartner", "type": "address"}, {"name": "_fixReward", "type": "uint256"}, {
        "name": "_varReward",
        "type": "uint256"
    }, {"name": "valueTypeId", "type": "uint256"}, {"name": "contractTypeIds", "type": "uint256[]"}],
    "payable": false,
    "type": "constructor"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "creator", "type": "address"}, {
        "indexed": false,
        "name": "partner",
        "type": "address"
    }, {"indexed": false, "name": "contractAddress", "type": "address"}],
    "name": "ContractAccepted",
    "type": "event"
}, {
    "anonymous": false,
    "inputs": [{"indexed": false, "name": "creator", "type": "address"}, {
        "indexed": false,
        "name": "partner",
        "type": "address"
    }, {"indexed": false, "name": "contractAddress", "type": "address"}],
    "name": "ContractDeclined",
    "type": "event"
}];

IndividualContractsSubscribedTo = [];

IndividualContractContract = web3.eth.contract(abiArray);

export function createIndividualContract(name, description, contractPartner, fixReward, varReward, valueTypeId, contractTypeIds, cb) {
    Session.set('waitingForConfirmation', true);
    IndividualContractContract.new(name, description, contractPartner, fixReward, varReward, valueTypeId, contractTypeIds,
        {
            from: web3.eth.accounts[0],
            data: '',
            gas: '4700000'
        }, (error, contract) => {
            Session.set('waitingForConfirmation', false);
            if (error) {
                console.error(error);
                Materialize.toast('You have to accept the transaction', 3000);
            }
            else {
                const createIndividualContractTx = {
                    type: 'Contract',
                    title: 'New contract created',
                    description: 'You created a new contract'
                };
                insertPendingTransaction(contract.transactionHash, createIndividualContractTx);
                if (cb) cb();
                if (typeof contract.address !== 'undefined') {
                    console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
                    removePendingTransaction(contract.transactionHash);
                    console.log(contract);
                }
            }
        }
    );
}

export function subscribeToContract(contractAddress) {
    console.log('Subscribed to contract: ' + contractAddress);
    IndividualContractsSubscribedTo[contractAddress] = IndividualContractContract.at(contractAddress);
    watchEvents(contractAddress);
}

export function watchEvents(contractAddress) {
    IndividualContractsSubscribedTo[contractAddress].allEvents({
        fromBlock: 0,
        toBlock: 'latest'
    }).watch((error, result) => {
        if (error) console.error(error);
        else {
            console.log('event watcher', result);
        }
    });
}

export function initializeActiveContracts() {
    const activeContracts = Contracts.find({isActive: true}).fetch();
    for (let i = 0; i < activeContracts.length; i++) {
        subscribeToContract(activeContracts[i].contractAddress);
    }
}